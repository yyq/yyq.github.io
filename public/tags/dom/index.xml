<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dom on Young Story</title><link>https://yyq.github.io/tags/dom/</link><description>Recent content in dom on Young Story</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 24 Dec 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://yyq.github.io/tags/dom/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript DOM 编程艺术 读书笔记</title><link>https://yyq.github.io/posts/2016/2016-12-24-javascript-dom/</link><pubDate>Sat, 24 Dec 2016 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2016/2016-12-24-javascript-dom/</guid><description>读后感 第一次认真看完前端的书籍，理解到了网页上的“MVC”，即：结构，样式，行为。
Model 模型，在此处即结构，DOM树，网页的核心内容，一个网页，可以没有行为，也可以没有样式，但是一定得有结构；在html结构中，可以指定样式，也可以嵌入行为。
View 样式，网页的外观等，大多用CSS来实现；
Controller 行为，最灵活的一个部分，让网页上的一切“动”起来的灵魂，大多用JavaScript来实现。在JavaScript中，可以修改结构，也可以修改样式。
写网站的时候，一定要注意的一点就是：平稳退化。
摘抄笔记 这本书的重点是JavaScript，笔记中如果没有特别描述，都是在讲JavaScript.
全局变量，可以在脚本的任何位置被引用。 var关键字可以明确的为函数变量设定作用域。如果在某个函数中使用了var，那么变量就将被视为一个局部变量，反之，如果没有使用var，那个变量就将被视为一个全局变量。 在定义一个函数时，我们一定要把它内部的变量全部明确地声明为局部变量。总是使用var关键字，就能避免任何形式的二义性隐患 DOM===Document Object Model JavaScript里的对象可以分为三种类型。 用户定义对象：程序员自己创建的。 内建对象：内建在JavaScript语言里的对象，Array,Math,Date等 宿主对象：由浏览器提供的对象。例如：window DOM的原子是元素节点 元素节点的nodeType === 1 属性节点的nodeType === 2 文本节点的nodeType === 3 &amp;lt;p&amp;gt; id=&amp;#39;x&amp;#39;&amp;gt;Hello Motor!&amp;lt;/p&amp;gt; 包含在p元素里的文本是另一种节点，他是p元素的第一个子节点。文本的内容可以用alert(x.childNodes[0].nodeValue);显示出来 如果使用JavaScript，就要确认，这么做会对用户的浏览体验产生怎样的影响，还有个更重要的问题，如果用户的浏览器不支持JavaScript该怎么办？所谓的平稳退化，就是虽然某些功能无法使用，但是最基本的操作仍能顺利完成 接上一条，把链接类节点里，href属性设置为真实存在的URL地址后，即使JavaScript被禁用，这个链接也是可用的，这是一个经典的平稳退化的例子 if(!document.getElementsByTagName) return false,具有良好的向后兼容性。 出于可读性的考虑，把return false的语句尽量全部集中到函数的开头部分。 共享onload事件 function addLoadEvent(func){ var oldonload = window.onload; if (typeof window.onload != &amp;#39;function&amp;#39;){ window.onload =func; }else{ window.onload = function(){ oldonload(); func(); } } } 千万不要忘记并非所有的用户都使用鼠标。比如视力残疾的用户往往无法看清屏幕，更喜欢使用键盘 结构与行为的分离程度，越大越好 JavaScript通过创建新元素和修改现有元素来改变网页结构 把结构，行为和样式分开永远都是一个好主意，避免在&amp;lt;body&amp;gt;部分乱用&amp;lt;script&amp;gt;标签，避免使用document.</description></item></channel></rss>