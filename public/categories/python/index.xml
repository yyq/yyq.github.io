<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Young Story</title><link>https://yyq.github.io/categories/python/</link><description>Recent content in Python on Young Story</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 24 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://yyq.github.io/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python爬糗百热门20条并邮件分发+wxPython简易GUI+py2app转成可执行文件</title><link>https://yyq.github.io/posts/2015/2015-06-24-python_spider/</link><pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-06-24-python_spider/</guid><description>&lt;p>学了一阵子Python，拿来做个什么有意思的东西呢？爬糗百好了，爬到的内容，邮件分发出去。&lt;/p>
&lt;p>然后又啃了两天的wxpython，做了个简易的邮件管理界面，可以在这里增加或者删除邮件，并且一键爬虫发送。&lt;/p>
&lt;p>最后，索性封装成APP吧，又试了一把py2app，简单好用。&lt;/p>
&lt;p>由于是让用户自行添加和删除邮箱，所以程序一定要兼顾到各种情况：比如输入的邮箱格式不合法，输入的邮箱里包含中文字符，分隔符不对，删除了全部邮箱然后又要发邮件等问题。&lt;/p></description></item><item><title>Python @property装饰器</title><link>https://yyq.github.io/posts/2015/2015-06-14-python-property/</link><pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-06-14-python-property/</guid><description>廖老师的博客链接如下，一开始没看懂，搜罗了一大堆，有点感觉了
点击打开链接其实@property装饰器就是把class的方法变成属性，见下面这个class，它有两个私有属性。
通过第一个@property和第二个@score.setter，我们可以像访问属性一样来调用类里面的方法，例如：
s=Student(“David”,99)
s.score = 100
至于用这种装饰器的原因，我想，就是为了简洁吧，直接用属性赋值的方式，执行了方法。Python 肯定是个懒人发明的。
 </description></item><item><title>Python装饰器有趣实例探究</title><link>https://yyq.github.io/posts/2015/2015-06-05-python-decorator-research/</link><pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-06-05-python-decorator-research/</guid><description>&lt;p>廖老师的教程实在太高深，没弄懂，&lt;!-- raw HTML omitted -->点击打开链接&lt;!-- raw HTML omitted -->&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">deco_functionNeedDoc&lt;/span>(func):
&lt;span style="color:#66d9ef">if&lt;/span> func&lt;span style="color:#f92672">.&lt;/span>__doc__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span> :
print func, &lt;span style="color:#e6db74">&amp;#34;has no __doc__, it&amp;#39;s a bad habit.&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span>:
print func, &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span>, func&lt;span style="color:#f92672">.&lt;/span>__doc__, &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> func
&lt;span style="color:#a6e22e">@deco_functionNeedDoc&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>():
print &lt;span style="color:#e6db74">&amp;#39;f() Do something&amp;#39;&lt;/span>
&lt;span style="color:#a6e22e">@deco_functionNeedDoc&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>():
&lt;span style="color:#e6db74">&amp;#39;I have a __doc__&amp;#39;&lt;/span>
print &lt;span style="color:#e6db74">&amp;#39;g() Do something&amp;#39;&lt;/span>
f()
g()
print f
print g&lt;span style="color:#f92672">&amp;lt;/&lt;/span>pre&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段代码打印结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">&amp;lt;&lt;/span>function f at &lt;span style="color:#ae81ff">0x0238F930&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> has no&lt;span style="color:#f92672">**&lt;/span>doc&lt;span style="color:#f92672">**&lt;/span>, it&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#75715e">#8217;s a bad habit.&lt;/span>
&lt;span style="color:#f92672">&amp;lt;&lt;/span>function g at &lt;span style="color:#ae81ff">0x0238F8B0&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> : I have a &lt;span style="color:#f92672">**&lt;/span>doc&lt;span style="color:#f92672">**&lt;/span> &lt;span style="color:#f92672">.&lt;/span>f() Do somethingg() Do something
&lt;span style="color:#f92672">&amp;lt;&lt;/span>function f at &lt;span style="color:#ae81ff">0x0238F930&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;&lt;/span>function g at &lt;span style="color:#ae81ff">0x0238F8B0&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当时我就晕菜了，想了很久，原来在@装饰器函数的时候就会调用装饰器，装饰器函数return func，而func就是传进去的参数f。这个时候把代码改改。&lt;/p></description></item></channel></rss>