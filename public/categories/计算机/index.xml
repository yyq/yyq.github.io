<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>计算机 on Young Story</title><link>https://yyq.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/</link><description>Recent content in 计算机 on Young Story</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 11 Jul 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://yyq.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/index.xml" rel="self" type="application/rss+xml"/><item><title>iOS逆向工程学习日记3--实践</title><link>https://yyq.github.io/posts/2015/2015-07-11-ios-security-learn-3/</link><pubDate>Sat, 11 Jul 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-07-11-ios-security-learn-3/</guid><description>Results： 学会了使用反汇编工具hopper，找了一些个程序，试了试，有的二进制文件还是比较容易分析的，有的比较难，我暂时还不会。我搞定的成果如下：
Mac OS X，迅雷，VIP离线下载权限
Mac OS X，iExplorer，免注册
iOS，搜狐视频，跳过所有广告，解除美剧下载限制
update:
iOS PPTV，乐视视频，可以观看VIP影片
 Key： 改掉几个函数的返回值就好了，类似isRegister这个函数或者isVIP这样的函数，看看逻辑，分析分析代码流程，再把关键位置的汇编代码改掉，即可。
x86汇编指令，mov eax, 0x1，把数字1放到eax寄存器，通常函数的返回值存在eax中，然后用ret指令
arm汇编指令，movs r0, #0x1，寄存器用r0
 Thinking： 想要改变一个iOS软件的行为，可以从三个层次去着手：
改掉汇编代码，重新生成新的可执行文件，替换
hook一些函数，例如Theos的常用手法
拦截并且修改网络请求
 </description></item><item><title>iOS逆向-学习日记2-Mac OS X上的工具</title><link>https://yyq.github.io/posts/2015/2015-07-07-ios-security-learn-2/</link><pubDate>Tue, 07 Jul 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-07-07-ios-security-learn-2/</guid><description>&lt;p>这一次，主要是按照别人的教程，把Mac上逆向工程有关的工具挨个试了个遍。先说几个重点的：Charles，Reveal，TheOS，IDA，Hopper。其中Charles，Reveal，IDA和Hopper都是收费的，且都有demo版本可以下载适用，TheOS是免费。&lt;/p>
&lt;h2 id="简介四个收费工具">简介四个收费工具&lt;/h2>
&lt;p>Charles用于分析网络流量，模拟器，mac os x，device都可以搞定各种get post connect，header cookie分门别类一目了然。价格不贵。&lt;/p>
&lt;p>Reveal主攻iOS UI，模拟器和device都行，对于越狱的设备可在cydia里装个插件，然后查看并且临时修改UI，利器。&lt;/p>
&lt;p>IDA和Hopper，算作一类了，主要功能是二进制文件到汇编代码，和进一步的汇编代码到C语言代码。我亲自使用过后，着实感觉到工具的强大，十分的强大。再加上工具里各种代码块和控制流的显示，就算我只是一个逆向工程的外行，也知道这样的信息会带来多么恐怖的分析成果。IDA是各个平台的产品都有，价格上千美刀了。Hopper是只有Mac平台上的，价格几百块的样子。据学习过逆向工程的同事说，IDA还是很强大很流行的。&lt;/p>
&lt;p>这四个工具的使用难度，Charles比较简单，Reveal略复杂一点。反汇编工具就超级复杂了。不过都有UI，自己可以一个个试着玩玩。&lt;/p>
&lt;h2 id="详细介绍theos越狱开发工具">详细介绍Theos越狱开发工具&lt;/h2>
&lt;p>接下来说说花了我很多时间用来实践的Theos吧。一个跨平台的development kit，用于开发编译iOS软件的，without Xcode。越狱后的iOS所用的插件，Cydia上的那些工具，大都基于Theos开发的。&lt;/p></description></item><item><title>Python爬糗百热门20条并邮件分发+wxPython简易GUI+py2app转成可执行文件</title><link>https://yyq.github.io/posts/2015/2015-06-24-python_spider/</link><pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-06-24-python_spider/</guid><description>&lt;p>学了一阵子Python，拿来做个什么有意思的东西呢？爬糗百好了，爬到的内容，邮件分发出去。&lt;/p>
&lt;p>然后又啃了两天的wxpython，做了个简易的邮件管理界面，可以在这里增加或者删除邮件，并且一键爬虫发送。&lt;/p>
&lt;p>最后，索性封装成APP吧，又试了一把py2app，简单好用。&lt;/p>
&lt;p>由于是让用户自行添加和删除邮箱，所以程序一定要兼顾到各种情况：比如输入的邮箱格式不合法，输入的邮箱里包含中文字符，分隔符不对，删除了全部邮箱然后又要发邮件等问题。&lt;/p></description></item><item><title>Python @property装饰器</title><link>https://yyq.github.io/posts/2015/2015-06-14-python-property/</link><pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-06-14-python-property/</guid><description>廖老师的博客链接如下，一开始没看懂，搜罗了一大堆，有点感觉了
点击打开链接其实@property装饰器就是把class的方法变成属性，见下面这个class，它有两个私有属性。
通过第一个@property和第二个@score.setter，我们可以像访问属性一样来调用类里面的方法，例如：
s=Student(“David”,99)
s.score = 100
至于用这种装饰器的原因，我想，就是为了简洁吧，直接用属性赋值的方式，执行了方法。Python 肯定是个懒人发明的。
 </description></item><item><title>Python装饰器有趣实例探究</title><link>https://yyq.github.io/posts/2015/2015-06-05-python-decorator-research/</link><pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-06-05-python-decorator-research/</guid><description>&lt;p>廖老师的教程实在太高深，没弄懂，&lt;!-- raw HTML omitted -->点击打开链接&lt;!-- raw HTML omitted -->&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">deco_functionNeedDoc&lt;/span>(func):
&lt;span style="color:#66d9ef">if&lt;/span> func&lt;span style="color:#f92672">.&lt;/span>__doc__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span> :
print func, &lt;span style="color:#e6db74">&amp;#34;has no __doc__, it&amp;#39;s a bad habit.&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span>:
print func, &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span>, func&lt;span style="color:#f92672">.&lt;/span>__doc__, &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> func
&lt;span style="color:#a6e22e">@deco_functionNeedDoc&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>():
print &lt;span style="color:#e6db74">&amp;#39;f() Do something&amp;#39;&lt;/span>
&lt;span style="color:#a6e22e">@deco_functionNeedDoc&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>():
&lt;span style="color:#e6db74">&amp;#39;I have a __doc__&amp;#39;&lt;/span>
print &lt;span style="color:#e6db74">&amp;#39;g() Do something&amp;#39;&lt;/span>
f()
g()
print f
print g&lt;span style="color:#f92672">&amp;lt;/&lt;/span>pre&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段代码打印结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">&amp;lt;&lt;/span>function f at &lt;span style="color:#ae81ff">0x0238F930&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> has no&lt;span style="color:#f92672">**&lt;/span>doc&lt;span style="color:#f92672">**&lt;/span>, it&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#75715e">#8217;s a bad habit.&lt;/span>
&lt;span style="color:#f92672">&amp;lt;&lt;/span>function g at &lt;span style="color:#ae81ff">0x0238F8B0&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> : I have a &lt;span style="color:#f92672">**&lt;/span>doc&lt;span style="color:#f92672">**&lt;/span> &lt;span style="color:#f92672">.&lt;/span>f() Do somethingg() Do something
&lt;span style="color:#f92672">&amp;lt;&lt;/span>function f at &lt;span style="color:#ae81ff">0x0238F930&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;&lt;/span>function g at &lt;span style="color:#ae81ff">0x0238F8B0&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当时我就晕菜了，想了很久，原来在@装饰器函数的时候就会调用装饰器，装饰器函数return func，而func就是传进去的参数f。这个时候把代码改改。&lt;/p></description></item><item><title>That Cloud Services of CI</title><link>https://yyq.github.io/posts/2015/2015-05-14-that-cloud-services-of-ci/</link><pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-05-14-that-cloud-services-of-ci/</guid><description>&lt;p>When we find some open source projects on github( e.g. &lt;!-- raw HTML omitted -->ruby-cucumber&lt;!-- raw HTML omitted -->). We can found some green icon to display the status of the project on the README.md file. Like these:&lt;/p>
&lt;p>&lt;img src="2015-05-14-10.18.58.png" alt="x">&lt;/p>
&lt;p>, it looks very attractive to me. Especially the build passing status and the code coverage. Even I’m not working for the CI in our company, I’m still interested in it.&lt;/p>
&lt;p>When push some code to my code base, then automatically building the code, running tests, and showing the build status &amp;amp; code coverage real-time on the readme page, That’s COOL! When I look into more, the &lt;a href="https://travis-ci.org">travis-ci.org&lt;/a> and the &lt;a href="https://coveralls.io">coveralls.io&lt;/a> are free for open source project on github.&lt;/p>
&lt;p>Let me have a try.&lt;/p>
&lt;p>Since recently I’m learning python. First, I created a &lt;a href="https://github.com/yyq/HelloWorldPython">helloworldpython&lt;/a> project on my github.&lt;/p>
&lt;h1 id="the-travis-ci">The Travis-CI&lt;/h1>
&lt;p>it supports most popular languages. After signing in it with github account, open the service for my helloworld project. After the authentication for travis-ci, it will add an service for the project, we can found that on the setting of the project:&lt;/p></description></item><item><title>svn转git简单实践</title><link>https://yyq.github.io/posts/2015/2015-04-29-svn-transfer2-git/</link><pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-04-29-svn-transfer2-git/</guid><description>前言 涉及公司内部的名词，就用abc来代替好了。
我负责的C工程，代码之前一直是用SVN来管理代码版本。为了响应党的号召，改Git，公司还花钱买了github企业版，这年头花钱买github而不是自己搭gitlab，良心企业啊。上网搜搜教程，试了一试，便成功了。关键操作记录在此了。
需求一：svn转git git svn init http://svn_address git svn fetch&amp;lt;/pre&amp;gt; or using git svn fetch -r 1:HEAD, 从revision 1开始fetch 去趟厕所，再喝杯咖啡，看stdout的信息可以看到正在从svn server上一个revision一个revision的内容往下拖，C工程（java代码为主，三万多行代码，引用的jar包10来个，其他的引用的jar包都用maven配置好了，所以不用把jar包存在工程里，SVN 的revision 700个左右），耗时大概10分钟，便转换完毕了。
然后本地的git project已经建立好了。往远端push就好了。
git remote add origin git@git_address git push -u origin master&amp;lt;/pre&amp;gt; 需求二：将svn的改动同步到git 由于IDE使用的不熟悉，不是立马用IDE git clone过来工程就能直接用，没空来折腾。所以最近几天仍然只用svn来commit，但是想要更新svn project上的内容到git。
怎么搞。上网一搜，挺好搞。
git svn fetch git svn rebase git svn fetch git push -u origin master&amp;lt;/pre&amp;gt; 不要问我为什么用这几句话，我也就是临时上网搜一下拿来用了。需要知道这命令干什么用的话，用help命令好了。
产出 之后用git来管理C工程源代码了，托github企业版的福，可以更加方便的在网页上show给别人看了，哪天我改了多少代码，代码量啦，多少个新的feature啦，release note啦，issue track啦，都可以统统的放在一个网站上搞定了。
还有，github pages的功能，给C工程建了一个宣传网页，瞬间高大上了有没有。
by the way, 我参考的网页
http://www.blogjava.net/lishunli/archive/2012/01/15/368562.html</description></item><item><title>Java访问https网页时证书问题</title><link>https://yyq.github.io/posts/2015/2015-03-30-java-install-ssl-certification/</link><pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-03-30-java-install-ssl-certification/</guid><description>&lt;p>报错信息：&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>内部工具开发中，有一个步骤要去一个https的网页上抓取内容，然后该网站的证书没有被本机认可，于是乎拒绝了抓取内容。我本来的想法是，检测到证书问题之后，安装证书好了。上网搜了搜，解决方案大致两类：一是自己手动改改这里那里添加证书完事。二是在java代码中设定忽略所有证书问题。&lt;/p>
&lt;p>如果是用第一种方案，那我的工具在所有其他工程师电脑上运行的时候，都需要它们自己去手动添加证书，那也太麻烦我的customer们了，虽然这种手动添加证书的事情只用干一次，但是他们都那么娇生惯养的，估计耽误他们工作时间来做这样的事情肯定不妥的。遂放弃的第一种思路，来看第二种，忽略所有，呵呵，代码能搞定。不过会有安全问题是吧。不过这又是内部工具，就把安全问题忽略好了。&lt;/p></description></item><item><title>我要用python把leetcodeOJ算法题刷一遍。</title><link>https://yyq.github.io/posts/2015/2015-03-30-python-through-leetcodeoj/</link><pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-03-30-python-through-leetcodeoj/</guid><description>给自己挖下一个坑，看看多久能摆平，平常吧，对算法有些兴趣，却总是没有持续的投入时间去学习。这次为了考验自己，看看到底有多强的执行力。leetcodeOJ难度对我来说刚刚好，不会难到我根本搞不定，也不会容易到每道题都能一次切过。在github上建立一个工程，https://github.com/yyq/LeetCodeOJ-python，看看多少时间能完成。完成顺序，就按照人家网站上的题号从小到大来吧。
这里写下这篇文章，也顺便记录一下，在切题过程中遇到的坑，以及学习心得，感想。
第四题。两个有序数组找中位数问题，时间复杂度log(n), 注意考虑奇偶性的情况，因为这个重复提交了好几遍才AC.
第五题：找回文字符串，思路好说，边界问题坑了我两三把。
第八题：字符串转数字的方法，各种特殊情况都需要考虑周全。</description></item><item><title>iOS安全-学习日记1</title><link>https://yyq.github.io/posts/2015/2015-03-08-ios-security-learn-1/</link><pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-03-08-ios-security-learn-1/</guid><description>&lt;h1 id="前fei言hua">前(fei)言(hua)&lt;/h1>
&lt;p>上班之余，自学一些计算机安全一类的知识。有相关经验的同学给了我几个建议：1.计算机安全范围很广，有web啦，sql啦，移动端啦balabala，自己选择一个自己感兴趣的较窄的学习就好。2. 社区，乌云，看雪&lt;/p>
&lt;p>我自己对iOS还有些兴趣，遂决定开始自学iOS安全。乌云我是连注册都没资格，需要提交漏洞才行，我这什么相关知识都不会，只先看看好了。在谷歌上搜了搜，很容易搜到CSDN上念茜的《iOS安全攻防》这个看上去知识比较浅一点，应该会适合我。那么就一课一课开始学。她写的相关博文是一两年前了，不一定百分之百能适用于当前的环境，不过正好是增加学习难度的机会。也可以用自己的博文来更新和更加详细的注释一下她的博客，更容易让初学者学习到。&lt;/p>
&lt;h1 id="ios安全攻防一hack必备的命令与工具"> iOS安全攻防（一）：Hack必备的命令与工具&lt;/h1>
&lt;p>&lt;a href="http://blog.csdn.net/yiyaaixuexi/article/details/8288077">念茜博客原文地址&lt;/a>&lt;/p>
&lt;p>先是一些操作系统的基本的命令，我用过并且略有了解的如下：ps, netstat, route, ifconfig, tcpdump, gdb, ssh&lt;/p>
&lt;p>然后我没有接触过的：&lt;/p>
&lt;p>sysctl：检查设定Kernel配置；renice：调整程序运行的优先级；lsof：列出当前系统打开的文件列表，一切皆文件包括网络，硬件设备；patch：补丁工具。&lt;/p>
&lt;p>然后她有特意注释的三个工具，otool，可以查看可执行程序都链接了哪些库，nm，显示符号表，ldid，用于给需要运行在iOS上的程序签名用。otool和nm在自己的mac电脑上有，os x上我没找到ldid，于是在ipad上用cydia装了ldid。不过之后的实验中好像不签名也能运行来着。&lt;/p></description></item><item><title>论在程序中写log的重要性</title><link>https://yyq.github.io/posts/2015/2015-03-05-the-importance-of-writing-log/</link><pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-03-05-the-importance-of-writing-log/</guid><description>&lt;p>别人开发的工具，没几个人用，然后别人比较忙不管这摊子了，然后没人弄，组织上说，需要我来维护。正好碰上某leader推广这工具，这下完了，一堆bug，必须摆平。基本上一天一个到两个的速度，两三个礼拜的时间，紧急的bug都搞定了。之后心中最大最大的感受就是关于在代码中写Log。&lt;/p>
&lt;p>从前自己写写小程序自己怎么折腾都没所谓，错了大不了就调试呗，从来没有写log的习惯，偶尔就在控制台输出输出就完事儿。这一轮忙碌的修bug事件，让我彻底改变了写log存log读log的看法。&lt;/p>
&lt;p>我感受到的写log的好处有三点：&lt;/p></description></item><item><title>ClearCase2Git，git-cc的使用</title><link>https://yyq.github.io/posts/2015/2015-01-11-clearcase2git-usage-of-git-cc/</link><pubDate>Sun, 11 Jan 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-01-11-clearcase2git-usage-of-git-cc/</guid><description>&lt;h1 id="简介">简介&lt;/h1>
&lt;!-- raw HTML omitted -->
&lt;h1 id="基本环境">基本环境&lt;/h1>
&lt;p>一个linuxVM，有cleartool，git，python。其中较为棘手的应该是在一个linux机器上安装clearcase的一系列工具了，cleartool是命令行版本的CC。总之安装Clearcase不是一件简单的事情，我是从公司要了个自带clearcase的RHEL的模板就开始了。&lt;/p>
&lt;h1 id="了解git-cc">了解git-cc&lt;/h1>
&lt;p>关于git，看完过PRO GIT那本书(&lt;!-- raw HTML omitted -->it’s free here&lt;!-- raw HTML omitted -->)，有些认识。对clearcase，不熟悉，问了同事也告诉我只能通过man来快速了解cleartool的各个命令。好像没有别的办法来速成了，git-cc这工具是网上看着免费的比较流行的cc2git的工具了。拿来直接用，报错一堆堆，搞不定，没接触过python，然后把codecademy上的python教程学完，之后再看git-cc源代码，能理解一些了。&lt;/p>
&lt;p>这个工具做的主要的事情就是：下载一个snapshot view，新建一个空的git repository，cleartool lsh列出view的历史活动信息，处理好新建文件和checkin代码以及各个文件的版本号信息，然后按照从开始到现在的时间顺序，做若干次把cc中某个文件的某个版本copy到git中，然后git commit。然后结束了。&lt;/p></description></item></channel></rss>