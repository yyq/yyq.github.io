<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Infrastructure on Young Story</title><link>https://yyq.github.io/categories/infrastructure/</link><description>Recent content in Infrastructure on Young Story</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 May 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://yyq.github.io/categories/infrastructure/index.xml" rel="self" type="application/rss+xml"/><item><title>That Cloud Services of CI</title><link>https://yyq.github.io/posts/2015/2015-05-14-that-cloud-services-of-ci/</link><pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-05-14-that-cloud-services-of-ci/</guid><description>&lt;p>When we find some open source projects on github( e.g. &lt;!-- raw HTML omitted -->ruby-cucumber&lt;!-- raw HTML omitted -->). We can found some green icon to display the status of the project on the README.md file. Like these:&lt;/p>
&lt;p>&lt;img src="2015-05-14-10.18.58.png" alt="x">&lt;/p>
&lt;p>, it looks very attractive to me. Especially the build passing status and the code coverage. Even I’m not working for the CI in our company, I’m still interested in it.&lt;/p>
&lt;p>When push some code to my code base, then automatically building the code, running tests, and showing the build status &amp;amp; code coverage real-time on the readme page, That’s COOL! When I look into more, the &lt;a href="https://travis-ci.org">travis-ci.org&lt;/a> and the &lt;a href="https://coveralls.io">coveralls.io&lt;/a> are free for open source project on github.&lt;/p>
&lt;p>Let me have a try.&lt;/p>
&lt;p>Since recently I’m learning python. First, I created a &lt;a href="https://github.com/yyq/HelloWorldPython">helloworldpython&lt;/a> project on my github.&lt;/p>
&lt;h1 id="the-travis-ci">The Travis-CI&lt;/h1>
&lt;p>it supports most popular languages. After signing in it with github account, open the service for my helloworld project. After the authentication for travis-ci, it will add an service for the project, we can found that on the setting of the project:&lt;/p></description></item><item><title>svn转git简单实践</title><link>https://yyq.github.io/posts/2015/2015-04-29-svn-transfer2-git/</link><pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-04-29-svn-transfer2-git/</guid><description>前言 涉及公司内部的名词，就用abc来代替好了。
我负责的C工程，代码之前一直是用SVN来管理代码版本。为了响应党的号召，改Git，公司还花钱买了github企业版，这年头花钱买github而不是自己搭gitlab，良心企业啊。上网搜搜教程，试了一试，便成功了。关键操作记录在此了。
需求一：svn转git git svn init http://svn_address git svn fetch&amp;lt;/pre&amp;gt; or using git svn fetch -r 1:HEAD, 从revision 1开始fetch 去趟厕所，再喝杯咖啡，看stdout的信息可以看到正在从svn server上一个revision一个revision的内容往下拖，C工程（java代码为主，三万多行代码，引用的jar包10来个，其他的引用的jar包都用maven配置好了，所以不用把jar包存在工程里，SVN 的revision 700个左右），耗时大概10分钟，便转换完毕了。
然后本地的git project已经建立好了。往远端push就好了。
git remote add origin git@git_address git push -u origin master&amp;lt;/pre&amp;gt; 需求二：将svn的改动同步到git 由于IDE使用的不熟悉，不是立马用IDE git clone过来工程就能直接用，没空来折腾。所以最近几天仍然只用svn来commit，但是想要更新svn project上的内容到git。
怎么搞。上网一搜，挺好搞。
git svn fetch git svn rebase git svn fetch git push -u origin master&amp;lt;/pre&amp;gt; 不要问我为什么用这几句话，我也就是临时上网搜一下拿来用了。需要知道这命令干什么用的话，用help命令好了。
产出 之后用git来管理C工程源代码了，托github企业版的福，可以更加方便的在网页上show给别人看了，哪天我改了多少代码，代码量啦，多少个新的feature啦，release note啦，issue track啦，都可以统统的放在一个网站上搞定了。
还有，github pages的功能，给C工程建了一个宣传网页，瞬间高大上了有没有。
by the way, 我参考的网页
http://www.blogjava.net/lishunli/archive/2012/01/15/368562.html</description></item><item><title>Java访问https网页时证书问题</title><link>https://yyq.github.io/posts/2015/2015-03-30-java-install-ssl-certification/</link><pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-03-30-java-install-ssl-certification/</guid><description>&lt;p>报错信息：&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>内部工具开发中，有一个步骤要去一个https的网页上抓取内容，然后该网站的证书没有被本机认可，于是乎拒绝了抓取内容。我本来的想法是，检测到证书问题之后，安装证书好了。上网搜了搜，解决方案大致两类：一是自己手动改改这里那里添加证书完事。二是在java代码中设定忽略所有证书问题。&lt;/p>
&lt;p>如果是用第一种方案，那我的工具在所有其他工程师电脑上运行的时候，都需要它们自己去手动添加证书，那也太麻烦我的customer们了，虽然这种手动添加证书的事情只用干一次，但是他们都那么娇生惯养的，估计耽误他们工作时间来做这样的事情肯定不妥的。遂放弃的第一种思路，来看第二种，忽略所有，呵呵，代码能搞定。不过会有安全问题是吧。不过这又是内部工具，就把安全问题忽略好了。&lt;/p></description></item><item><title>论在程序中写log的重要性</title><link>https://yyq.github.io/posts/2015/2015-03-05-the-importance-of-writing-log/</link><pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-03-05-the-importance-of-writing-log/</guid><description>&lt;p>别人开发的工具，没几个人用，然后别人比较忙不管这摊子了，然后没人弄，组织上说，需要我来维护。正好碰上某leader推广这工具，这下完了，一堆bug，必须摆平。基本上一天一个到两个的速度，两三个礼拜的时间，紧急的bug都搞定了。之后心中最大最大的感受就是关于在代码中写Log。&lt;/p>
&lt;p>从前自己写写小程序自己怎么折腾都没所谓，错了大不了就调试呗，从来没有写log的习惯，偶尔就在控制台输出输出就完事儿。这一轮忙碌的修bug事件，让我彻底改变了写log存log读log的看法。&lt;/p>
&lt;p>我感受到的写log的好处有三点：&lt;/p></description></item><item><title>ClearCase2Git，git-cc的使用</title><link>https://yyq.github.io/posts/2015/2015-01-11-clearcase2git-usage-of-git-cc/</link><pubDate>Sun, 11 Jan 2015 00:00:00 +0000</pubDate><guid>https://yyq.github.io/posts/2015/2015-01-11-clearcase2git-usage-of-git-cc/</guid><description>&lt;h1 id="简介">简介&lt;/h1>
&lt;!-- raw HTML omitted -->
&lt;h1 id="基本环境">基本环境&lt;/h1>
&lt;p>一个linuxVM，有cleartool，git，python。其中较为棘手的应该是在一个linux机器上安装clearcase的一系列工具了，cleartool是命令行版本的CC。总之安装Clearcase不是一件简单的事情，我是从公司要了个自带clearcase的RHEL的模板就开始了。&lt;/p>
&lt;h1 id="了解git-cc">了解git-cc&lt;/h1>
&lt;p>关于git，看完过PRO GIT那本书(&lt;!-- raw HTML omitted -->it’s free here&lt;!-- raw HTML omitted -->)，有些认识。对clearcase，不熟悉，问了同事也告诉我只能通过man来快速了解cleartool的各个命令。好像没有别的办法来速成了，git-cc这工具是网上看着免费的比较流行的cc2git的工具了。拿来直接用，报错一堆堆，搞不定，没接触过python，然后把codecademy上的python教程学完，之后再看git-cc源代码，能理解一些了。&lt;/p>
&lt;p>这个工具做的主要的事情就是：下载一个snapshot view，新建一个空的git repository，cleartool lsh列出view的历史活动信息，处理好新建文件和checkin代码以及各个文件的版本号信息，然后按照从开始到现在的时间顺序，做若干次把cc中某个文件的某个版本copy到git中，然后git commit。然后结束了。&lt;/p></description></item></channel></rss>